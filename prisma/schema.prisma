// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Series {
  id        String  @id @default(uuid())
  name      String   @db.VarChar(255)
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  seriesUser  SeriesUser[]
  matches     Match[]
}

enum MatchStatus {
  ONGOING
  ARCHIVED
}
model Match {
  id        String      @id @default(uuid())
  status    MatchStatus @default(ONGOING)
  number    Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  aScore    Int         @default(0)
  bScore    Int         @default(0)

  seriesId  String
  series    Series  @relation(fields: [seriesId], references: [id])

  matchPlayer MatchPlayer[]
  stat        Stat[]
}

model MatchPlayer {
  id        Int     @id @default(autoincrement())
  team      String  @db.VarChar(255)

  matchId   String
  match     Match  @relation(fields: [matchId], references: [id])

  playerId  String
  player    User   @relation(fields: [playerId], references: [id])
}

enum StatType {
  FG
  THREEPT
  BLK
  AST
}
model Stat {
  id        String  @id @default(uuid())
  type      StatType
  made      Boolean @default(false)

  matchId   String
  match     Match  @relation(fields: [matchId], references: [id])

  playerId  String
  player    User   @relation(fields: [playerId], references: [id])

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}


model SeriesUser {
  id        Int     @id @default(autoincrement())

  seriesId  String
  series    Series  @relation(fields: [seriesId], references: [id])

  playerId  String
  player    User   @relation(fields: [playerId], references: [id])
}

model User {
  id          String  @id @default(uuid())
  email       String?
  name        String?

  matchPlayer MatchPlayer[]
  seriesUser  SeriesUser[]
  stat        Stat[]
}